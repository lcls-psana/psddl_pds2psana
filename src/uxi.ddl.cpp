
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/uxi.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Uxi {
ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Uxi::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::width() const {
  return m_xtcObj->width();
}


uint32_t ConfigV1::height() const {
  return m_xtcObj->height();
}


uint32_t ConfigV1::numberOfFrames() const {
  return m_xtcObj->numberOfFrames();
}


uint32_t ConfigV1::numberOFBytesPerPixel() const {
  return m_xtcObj->numberOFBytesPerPixel();
}


uint32_t ConfigV1::sensorType() const {
  return m_xtcObj->sensorType();
}


ndarray<const uint32_t, 1> ConfigV1::timeOn() const {
  return m_xtcObj->timeOn(m_xtcObj);
}


ndarray<const uint32_t, 1> ConfigV1::timeOff() const {
  return m_xtcObj->timeOff(m_xtcObj);
}


ndarray<const uint32_t, 1> ConfigV1::delay() const {
  return m_xtcObj->delay(m_xtcObj);
}


uint32_t ConfigV1::readOnlyPots() const {
  return m_xtcObj->readOnlyPots();
}


ndarray<const double, 1> ConfigV1::pots() const {
  return m_xtcObj->pots(m_xtcObj);
}


uint8_t ConfigV1::potIsReadOnly(uint8_t i) const {
  return m_xtcObj->potIsReadOnly(i);
}


uint8_t ConfigV1::potIsTuned(uint8_t i) const {
  return m_xtcObj->potIsTuned(i);
}


uint32_t ConfigV1::numPixelsPerFrame() const {
  return m_xtcObj->numPixelsPerFrame();
}


uint32_t ConfigV1::numPixels() const {
  return m_xtcObj->numPixels();
}


uint32_t ConfigV1::frameSize() const {
  return m_xtcObj->frameSize();
}

template <typename Config>
FrameV1<Config>::FrameV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::Uxi::FrameV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
}
template <typename Config>
FrameV1<Config>::~FrameV1()
{
}


template <typename Config>
uint32_t FrameV1<Config>::acquisitionCount() const {
  return m_xtcObj->acquisitionCount();
}


template <typename Config>
uint32_t FrameV1<Config>::timestamp() const {
  return m_xtcObj->timestamp();
}


template <typename Config>
double FrameV1<Config>::temperature() const {
  return m_xtcObj->temperature();
}


template <typename Config>
ndarray<const uint16_t, 3> FrameV1<Config>::frames() const {
  return m_xtcObj->frames(*m_cfgPtr, m_xtcObj);
}

template class FrameV1<Pds::Uxi::ConfigV1>;
} // namespace Uxi
} // namespace psddl_pds2psana
