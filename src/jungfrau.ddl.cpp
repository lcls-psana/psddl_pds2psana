
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/jungfrau.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Jungfrau {
Psana::Jungfrau::ConfigV1::GainMode pds_to_psana(Pds::Jungfrau::ConfigV1::GainMode e)
{
  return Psana::Jungfrau::ConfigV1::GainMode(e);
}

Psana::Jungfrau::ConfigV1::SpeedMode pds_to_psana(Pds::Jungfrau::ConfigV1::SpeedMode e)
{
  return Psana::Jungfrau::ConfigV1::SpeedMode(e);
}

ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Jungfrau::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::numberOfModules() const {
  return m_xtcObj->numberOfModules();
}


uint32_t ConfigV1::numberOfRowsPerModule() const {
  return m_xtcObj->numberOfRowsPerModule();
}


uint32_t ConfigV1::numberOfColumnsPerModule() const {
  return m_xtcObj->numberOfColumnsPerModule();
}


uint32_t ConfigV1::biasVoltage() const {
  return m_xtcObj->biasVoltage();
}


Psana::Jungfrau::ConfigV1::GainMode ConfigV1::gainMode() const {
  return pds_to_psana(m_xtcObj->gainMode());
}


Psana::Jungfrau::ConfigV1::SpeedMode ConfigV1::speedMode() const {
  return pds_to_psana(m_xtcObj->speedMode());
}


double ConfigV1::triggerDelay() const {
  return m_xtcObj->triggerDelay();
}


double ConfigV1::exposureTime() const {
  return m_xtcObj->exposureTime();
}


uint32_t ConfigV1::frameSize() const {
  return m_xtcObj->frameSize();
}


uint32_t ConfigV1::numPixels() const {
  return m_xtcObj->numPixels();
}

template <typename Config>
ElementV1<Config>::ElementV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::Jungfrau::ElementV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
}
template <typename Config>
ElementV1<Config>::~ElementV1()
{
}


template <typename Config>
uint32_t ElementV1<Config>::frameNumber() const {
  return m_xtcObj->frameNumber();
}


template <typename Config>
uint32_t ElementV1<Config>::ticks() const {
  return m_xtcObj->ticks();
}


template <typename Config>
uint32_t ElementV1<Config>::fiducials() const {
  return m_xtcObj->fiducials();
}


template <typename Config>
ndarray<const uint16_t, 3> ElementV1<Config>::frame() const {
  return m_xtcObj->frame(*m_cfgPtr, m_xtcObj);
}

template class ElementV1<Pds::Jungfrau::ConfigV1>;
} // namespace Jungfrau
} // namespace psddl_pds2psana
